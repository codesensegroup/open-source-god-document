[{"data":1,"prerenderedAt":105},["Reactive",2],{"search-api":3},[4,11,24,30,36,49,63,86,96],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","Home",[],"     Go Go Python   我們是一群熱愛技術開發的工程師，除了平常上班之餘，會捲一些技術相關研究。這個Blog是我們的小天地，除了捲go與python相關語言與框架，也會分享一些零散的技術筆記。     Go :  Python :  Side Project..",{"id":12,"path":13,"dir":14,"title":15,"description":7,"keywords":16,"body":23},"content:0.python:1.dev-env-build.md","/python/dev-env-build","python","開發環境建置",[17,18,19,20,21,22],"1. 版控Tool簡易整理","2. Pyenv安裝 (WSL2) : 切換python版本使用","3. 安裝python & FastAPI","4. 如何建立虛擬環境 (virtualenv)","5. Visual Studio Tool建議安裝Extension (待完成)","推薦文章","  1. 版控Tool簡易整理   Pyenv: Python  sdkman: JVM(Java、Kotlin、Gradle、etc.)  nvm: node/npm  dotnet: .NET Core/.NET  gvm:golang  2. Pyenv安裝 (WSL2) : 切換python版本使用  a. 確認更新     sudo   apt   update   &&   sudo   apt   upgrade   -y\n  b. 安裝必需的基礎工具     sudo   apt   update   &&   sudo   apt   install   -y   \\\n     curl   git   build-essential   libssl-dev   zlib1g-dev   libbz2-dev   \\\n     libreadline-dev   libsqlite3-dev   wget   llvm   libncurses5-dev   libncursesw5-dev   \\\n     xz-utils   tk-dev   libffi-dev   liblzma-dev\n  \n    項目   基礎開發工具\n   build-essential：提供 gcc 編譯器和基本的編譯工具，編譯 Python 原始碼。  llvm：提供程式碼優化功能，可以提高 Python 的編譯效能。  壓縮和解壓工具：\n   zlib1g-dev：支持多種壓縮功能，Python 的很多模組需要這個。  libbz2-dev：提供 bzip2 壓縮支持。  xz-utils：支持 xz 格式的壓縮檔案。  網絡和安全相關：\n   curl 和 wget：下載資源的工具，用於從網路上獲取安裝檔案。  git：版本控制工具，常用於下載原始碼。  libssl-dev：提供 SSL/TLS 加密支持，讓 Python 能安全地處理 HTTPS 連接。  系統庫支持：\n   libreadline-dev：改善 Python 互動 Shell 的使用體驗。  libsqlite3-dev：提供 SQLite 資料庫支持。  libncurses5-dev：支持終端界面應用程式。  libffi-dev：允許 Python 使用 C 語言擴展模組。  tk-dev：提供 Tkinter GUI 工具包，用於創建圖形界面。  c. 安裝 pyenv   使用 curl 下載並安裝 pyenv：     curl   https://pyenv.run   |   bash\n   如果 curl 指令無法使用，手動安裝：     git   clone   https://github.com/pyenv/pyenv.git   ~/.pyenv\n   編輯配置檔案     nano   ~/.bashrc        # 如果使用的是 Bash\n   nano   ~/.zshrc         # 如果使用的是 Zsh\n  在檔案的最後新增以下內容     export   PYENV_ROOT  =  \"  $HOME  /.pyenv\"\n   export   PATH  =  \"  $PYENV_ROOT  /bin:  $PATH  \"\n   eval   \"$(  pyenv   init   --path  )\"\n   eval   \"$(  pyenv   init -)\"\n  重新加載配置檔案     source   ~/.bashrc        # 如果使用的是 Bash\n   source   ~/.zshrc         # 如果使用的是 Zsh\n  確認安裝是否成功     pyenv   --version\n  3. 安裝python & FastAPI   安裝python     pyenv   install   3.11  .6    # 替換為需要的版本 (or 安裝)\n   pyenv   global   3.11  .6     # 設定全域版本\n   安裝FastAPI (最低要求：Python 3.8 或 3.9，不要使用：Python 3.7)  選擇   FastAPI 的版本     pip   install   fastapi   --upgrade\n  其他工具相容建議   推薦 ASGI 服務器  : Uvicorn  數據建模 : Pydantic  虛擬環境 : pyenv or venv  4. 如何建立虛擬環境 (virtualenv)  \n     三個專案（project1、project2、project3），每個專案都有獨立的虛擬環境。這些虛擬環境各自管理不同的 Python 版本和套件。  虛擬環境的目的：   隔離依賴：每個專案的套件互不干擾，避免衝突。  靈活管理 Python 版本：專案可以針對特定版本進行測試和開發。  容易部署：記錄依賴並方便複製環境。  上圖的實際操作     \n   # 安裝特定的 Python 版本\n   pyenv   install   2.2  .3\n   pyenv   install   3.11  .6\n   \n   # 創建虛擬環境\n   pyenv   virtualenv   2.2  .3   project1-env    # project1 使用 Python 2.2\n   pyenv   virtualenv   3.11  .6   project2-env   # project2 使用 Python 3\n   pyenv   virtualenv   2.2  .3   project3-env    # project3 使用 Python 2.2\n   \n   #進入對應的專案目錄，設定當地的虛擬環境\n   cd   project1\n   pyenv   local   project1-env\n   \n   cd   project2\n   pyenv   local   project2-env\n   \n   cd   project3\n   pyenv   local   project3-env\n  5. Visual Studio Tool建議安裝Extension (待完成)  推薦文章     理解 Python 後端技術：從 CGI 談到 WSGI, uWSGI 與 uwsgi    理解 Python 後端技術： ASGI (Asynchronous Server Gateway Interface) — WSGI 的繼承者    Python虛擬環境：venv vs. virtualenv  html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"id":25,"path":26,"dir":27,"title":15,"description":7,"keywords":28,"body":29},"content:1.golang:1.dev-env-build.md","/golang/dev-env-build","golang",[],"  開發環境建置",{"id":31,"path":32,"dir":7,"title":33,"description":7,"keywords":34,"body":35},"content:1.member.md","/member","Member",[],"     Our Memeber          samuikaze   喜歡寫程式、熱愛軟體工程        Spyua   個性外向，喜愛沖咖啡、平常時間喜歡閱讀外，也喜愛寫作。最開心的事是能與家人同樂。        shothead6062   個性外向        rellik24   個性...        Yawara0326   個性外向        yonger0718   who loves programming and playing video games.",{"id":37,"path":38,"dir":39,"title":40,"description":41,"keywords":42,"body":48},"content:2.angular:1.angular-starter.md","/angular/angular-starter","angular","Angular 起手式","本文件會針對學習與撰寫 Angular 所需要的工具與知識整理下來，當作入門的起手式。",[43,44,45,46,47],"Table of Contents","需求技能","協助工具","開始第一個 Angular 練習","參考資料","   本文件會針對學習與撰寫 Angular 所需要的工具與知識整理下來，當作入門的起手式。  Table of Contents    需求技能    前端最基本的 HTML + CSS + Javascript   Typescript   協助工具    必要工具   選用工具   開始第一個 Angular 練習   參考資料  需求技能  撰寫 Angular 前，需要先學會下面所列的這些基礎技能:   前端最基本的 HTML + CSS + Javascript  Typescript  以下是針對為什麼撰寫 Angular 前要學習這些技能的說明  前端最基本的 HTML + CSS + Javascript  Angular 是前端框架，而前端跟 HTML、CSS 與 Javascript 一定脫不了關係，因此對於這三項技能必須有基礎的了解，知道如何透過 HTML + CSS 刻劃出想要的版型，並透過 Javascript 實作頁面中的功能。  Typescript  Angular 目前開發上都是使用 Typescript 進行撰寫與編譯，因此對於 Typescript 必須有基礎的了解，特別是型別、介面的宣告、泛型、列舉、物件導向的使用。  協助工具  開發 Angular 少不了一些工具來協助建置、撰寫與編譯專案，下面會針對必要與選用的工具進行說明  必要工具  下面列出來的這些工具是必要的工具，學會這些工具是撰寫 Angular 專案的前置需求:   Node.js  主要是要使用其附帶的 npm 套件管理工具以及其由 Google 所開發並應用於 Google Chrome 系列瀏覽器的 V8 引擎   @angular/cli  在建置、撰寫、測試與編譯 Angular 專案時一定會用到的指令工具，因開發過程會大量使用，因此對於如何建立專案、建立元件 / 服務 / 模組 / 路由等、啟動測試環境、編譯正式版本等指令需要非常熟悉。  Git  版本控制，透過 Angular 指令建立專案時預設就會協助開發者初始化版本控制，在實際場景中，版本控制工具除了可以對專案進行版本控制外，也增加了專案協作的能力  任意終端機  不論在何種作業系統中，都一定會包含一個終端機應用程式供開發者或一般使用者使用，前面也有提到開發專案會大量使用 Angular 指令做事，npm 也是透過指令來管理其套件  Visual Studio Code  常被簡稱為 VSCode，目前在 Javascript 與 Typescript 世界中，它是公認最好用的「文字編輯器」，主要原因是因為 Typescript 與 VSCode 都是由微軟所開發，因此在整合方面非常好，再加上可以安裝延伸模組的特性，讓其除了有基礎的錯誤警示功能外，還可以加上除錯 (Debugger) 等額外功能，因此深受廣大的社群愛戴。  而下面列出來的是開發 Angular 專案時一定要安裝的延伸模組:   之所以稱其為「文字編輯器」而非 IDE 是因為有一部份的社群開發者認為在沒有安裝任何套件的情況下，VSCode 本身對於特定的程式語言並沒有除錯、編譯等功能，因此將其認定為文字編輯器，但這邊我也不想吵這個，開發起來順手最重要。   Angular Language Service  由 Angular 官方所開發的語言服務伺服器，提供程式碼撰寫時的快速完成功能。  Debugger for (任意瀏覽器)  透過中斷點來找出錯誤我想是很常見的除錯方式，在 VSCode 中若要透過中斷點來讓程式執行暫停在特定位置，就必須安裝這類套件，目前並不是每個瀏覽器都支援，但可以嘗試找看看有沒有相關的套件可以使用  EditorConfig for VS Code  透過 .editorconfig 檔來統一專案中程式碼撰寫風格是非常常見的，在 VSCode 中必須安裝此套件，.editorconfig 中所撰寫的規則才會生效  ESLint  看到 Lint 字樣就是到這個套件是用於支援 ESLint 這個 npm 套件的延伸模組，透過這個模組，可以將團隊所規定的撰寫規範、風格等，透過 ESLint 設定檔來加以限制，透過 ESLint 套件可以讓不符合規範的程式碼被標上紅色或黃色的下波浪線，進而增進專案的程式碼品質  Git Graph  版本控制圖表協助工具，當開發到一定的規模後，透過指令來檢視整個專案的分支情形是非常痛苦的事情，目前在所有圖形化分支工具中，我認為這款所匯出的圖形是最易讀懂，因此非常建議安裝此套件  Prettier - Code formatter  雖然 VSCode 內建就有針對 HTML / CSS / Javascript / Typescript 的格式化工具，但透過安裝此工具，可以針對 Sass、Scss 等非原生支援的檔案進行格式化  選用工具  以下是開發過程中可以考慮使用，但非必要的工具:   nvm  Node.js 有很多版本，而 Angular 每個版本針對 Node.js 版本的要求都不同，為了讓大家可以更方便的在不同版本間切換，非常推薦透過 nvm 進行 Node.js 的版本控制   Windows 使用者有第三方的 Port 版，搜尋 nvm for windows 就可以找到  pnpm  npm 最常被大家詬病的就是其套件管理的效率太差，雖然官方有推出新的解決方案，但好像沒有大力推廣，且後續好像也沒有繼續開發，因此紛紛出現第三方套件來解決這個問題，目前就 yarn 套件管理器之外，最常見的應該就屬 pnpm 了  它是透過將 npm 的套件安裝到作業系統使用者的資料夾中，每個專案 node_modules 資料夾中的套件資料夾會透過符號連結 (Symbolic link) 的方式把實際位置指到實際套件安裝的資料夾，透過這個方式管理套件除了可以節省硬碟空間外，對於已經安裝過的套件不需要再重新下載，因此在安裝的過程也會比較快   Windows 的實作方式與 Linux / MacOS 不同，但原理一樣，不過若專案安裝的套件過於複雜，或必須加上 npm 的   --legacy-peer-deps  參數才有辦法成功安裝的話，在 Windows 上就不建議使用此工具管理套件  Docker / Podman  透過容器來把主機環境與開發環境隔離是現在非常常見的開發方式，透過這種方式開發可以不用將開發所需的工具安裝到主機環境中，只要執行特定的映像檔，就可以把測試環境跑起來，且若是多人同時開發，透過容器還可以統一開發環境，避免因環境不同導致最終執行結果出現差異的狀況發生   Windows 使用者可以透過 WSL2 或 Docker Desktop 來執行  而 VSCode 的套件中也有一些選用的套件:   Dev Containers  容器開發必要的套件，透過這個套件讓 VSCode 可以開啟容器中的任意檔案與資料夾，  DotEnv  雖然 Angular 若有環境變數需要設定會使用其自帶的   environments.ts  檔來設定，但仍有少數團隊會使用   .env  檔來管理，若團隊是透過   .env  來管理這些變數，建議可以安裝這個套件  GitLens  團隊協作開發常常會發生程式碼寫錯，但沒人承認的狀況發生，在 Git 原生就有提供 Blame 功能讓團隊成員可以找出兇手是誰，但若檔案內容非常大，指令就必須下的很複雜，透過這個套件的協助，只要將輸入游標移動到指定的行後，該行後面就會出現最後是由誰所修改，非常的方便，若團隊中常有人搞事又不承認，這個套件就非常推薦安裝  IntelliCode  這個功能是由 Visual Studio 搬過來的，在 Copilot 出現前非常好用的自動完成工具，撰寫過程中會給出很多好用的提示，雖然不像 Visual Studio 內建的那麼聰明，但對於懶得打字的人來說非常好用  IntelliCode API Usage Examples  這個套件比 IntelliCode 還要晚出，其所提供的功能是協助開發者在 GitHub 上找出指定的功能別人是怎麼使用的，讓開發者當作參考，對於初學 Angular 或常用新出套件的開發者來說非常好用  Live Share  程式碼共編神器，也是從 Visual Studio 拔出來的功能，透過這個套件可以不用透過版控或任何第三方工具，直接在 VSCode 上同步看到修改的程式碼，非常適用於團隊開發臨時討論用  Pretty TypeScript Errors  有些第三方開發者認為原生的 VSCode 顯示 Typescript 錯誤非常的雜亂，因此想透過這個套件讓錯誤訊息更加直覺與整潔，但效果很主觀，因此對於錯誤訊息也有潔癖的人來說，這個套件是必裝  Sass (.sass only)  開發比較常見 CSS 與 Scss，但若你的團隊開發時是使用 Sass，那這個套件就是必裝套件了  WSL  Windows 使用者若想在 WSL2 中開發 Angular，建議安裝此延伸模組，其所提供的功能與 Dev Containers 類似，但是是與 WSL2 作互動  開始第一個 Angular 練習  網路上或市面上有許多學習 Angular 相關的資源，但若是第一次撰寫 Angular，會建議先去官方完成  「英雄之旅」 的入門專案，在這個練習的專案中你會學到最基礎的 Angular 撰寫，以及 API 如何呼叫  參考資料    Node.js - 維基百科   英雄之旅 - Angular Tutorial - Angular",{"id":50,"path":51,"dir":52,"title":53,"description":7,"keywords":54,"body":62},"content:98.tools:git-cz.md","/tools/git-cz","tools","Git-cz",[55,56,57,58,59,60,61],"Prerequisite","Introduction","Installation","Usage","Customization","Rules","References","   這篇文章應該要做為開發的起手式，目的是為了打造出一個整潔的Git環境，使用簡單的工具讓大家快速上手Git Message的撰寫，不用再被reject pull request所苦惱。  這次我們所選用的輔助工具為：  git-cz   requirements:   Node.js >= v12.20.0   @samuikaze: 工具的使用並非絕對的需求，重點是要培養一個良好的習慣，把每個 Commit Message 都按照  規則 寫好才是最重要的。  Prerequisite  使用這個工具之前，最起碼得先了解   Git  的用途和基礎的指令，如果還不熟悉的話，這邊推薦兩個方式來進行學習:    高見龍 - Gitbook : 往底下找有一些相關的素材可以使用，如果有興趣的話也推薦他的書籍!   Learn Git Branching : 讓你以實際的操作，並透過遊玩的方式來進行學習。  Introduction   Git-cz  是一款工具，用於生成語義化的   Git  提交訊息，能提升提交訊息的規範性與一致性。本文件旨在指導如何安裝、配置及使用   Git-cz ，並結合最佳實踐提升團隊效率。   主要功能：    互動式提交流程：  git-cz 提供一個引導式的提交過程，提示使用者選擇提交類型（如功能、新增、修復等），並填寫相關描述，確保提交訊息的一致性和可讀性。   自訂配置：  使用者可以在專案目錄中創建   changelog.config.js  檔案，定義自訂的提交類型、訊息格式、可選範圍等，以滿足專案的特定需求。(於   Customization  段落提及)    一句話描述   git-cz  的功能   能夠以一致的格式產出基本的git message，也提供自定義的格式提供設定。  Installation  nvm(optional, but recommended)   這個並沒有強制性的安裝需求，若是有對   Node.js  版控的需求者才必需使用。  Windows:  從   nvm-windows 的 GitHub 頁面  找到最新的release，並下載最新的安裝程式，按照指示完成安裝。  Others:  透過   curl  或是   wget  的方式進行下載並安裝。   請注意，中間的版本號   v0.40.1  隨時有更新的可能，可以到  nvm的repo 進行確認。      curl   -o-   https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh   |   bash\n     wget   -qO-   https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh   |   bash\n  安裝完成後可以在   Terminal  上空敲   nvm  看到所有   nvm  的指令集，紅框中的內容是一般常用指令，包含   install ,   list ,   uninstall  和   use 。    nvm-functions   安裝     nvm   install   \u003C  版本  號  >   [arch]\n   \n   # 預設抓取LTS\n   nvm   install   20\n   \n   # 有v無v皆可\n   nvm   install   v20\n   \n   # 安裝指定版本\n   nvm   install   20.18  .1\n   \n   # 指定架構/指令集，預設64bit，可選[32|64|arm64]\n   nvm   install   20.18  .1   64\n   使用/切換     #查看目前已安裝版本\n   nvm   list\n   \n   #切換至特定版本號，規則同安裝的規則\n   #若同時有多個一樣開頭時，則會透過模糊比對，選擇版本號最大的來進行使用\n   #ex: 18.1/18.2，只選擇use 18，會選用18.2\n   nvm   use   \u003C  版本  號  >   \n   \n   nvm   use   20\n   移除     #移除時需要指定詳細的版本號，無法模糊比對\n   nvm   uninstall   \u003C  版本  號  >\n   \n   nvm   uninstall   18.20  .5\n  Node.js  nvm(recommended)   所有的系統都建議採用這套分案進行，請參考   nvm usage 。  Windows  只推薦透過以下兩種方式進行：   直接到   Node.js 官方網站 選定版本進行下載(.msi檔)、安裝，原則上安裝過程全程下一步即可。  使用   chocolatey  套件管理器進行安裝，在   Node.js 官方網站 上也有詳細的步驟可以直接到   PowerShell  上直接執行。  macOS   透過   homebrew  這個套件管理器進行安裝，  官方網站 上亦有對應的安裝教學。     # 安裝homebrew\n   /bin/bash   -c   \"$(  curl   -fsSL   https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n   \n   # 下載並安裝 Node.js\n   # 版本可以自己指定在 @ 後頭\n   brew   install   node@20\n   \n   # 進行驗證\n   node   -v\n   npm   -v\n   官方安裝檔:   官方網站 上可以選取   macOS  對應的   .pkg  安裝包進行安裝，安裝的流程可以參考   這篇文章 。  Linux   這邊的案例以Ubuntu為主   透過   apt  等內建管理工具直接安裝(不推薦，版本沒再更新也無法特別指定)     # 先更新 apt\n   sudo   apt   update\n   \n   # 安裝node.js, npm，需要個別安裝\n   sudo   apt   install   -y   nodejs   npm\n   \n   # 進行驗證\n   node   -v\n   npm   -v\n   使用   NodeSource  提供的分支進行方裝，也可以參考   官方的文件  來進行   請注意，根據   官方文件  的描述，當前原則上僅支援 Node 18+ 的版本，同時 Ubuntu 18.04、Debian 8 & 9、Fedora 20~28、RH7、Amazon Linux 2 等 Distrubution 尚不支援。     # 如果沒有curl，先進行安裝\n   sudo   apt   install   -y   curl\n   \n   # 下載安裝script，可以指定詳細版本，若不指定則預設當前版本下的最新版\n   # 如果把 _版本 給移除留下 setup.x，便會安裝當前最新的release\n   curl   -fsSL   https://deb.nodesource.com/setup_20.x   -o   nodesource_setup.sh\n   \n   # 執行腳本，需要權限\n   sudo   -E   bash   nodesource_setup.sh\n   \n   # 進行安裝\n   sudo   apt   install   -y   nodejs\n   \n   # 進行驗證\n   node   -v\n  git-cz  安裝完成   Node.js  和   npm  後開啟cli，執行:     # 全域安裝(建議)\n   npm   install   -g   git-cz\n   \n   # 專案安裝\n   npm   install   --save-dev   git-cz\n  Usage  Normal usecase  當你需要提交新的   commit  時     # 先進行紀錄的添加才能夠進行commit\n   git   add   .\n   \n   # 最簡單直白的使用 git-cz\n   git-cz\n   \n   # 使用 git-cz，但移除表情符號\n   git-cz   --disable-emoji\n  需要輸入的內容:   類型: 選擇 commit 的類型，如功能性的變化、bug的修復等，選項包含:\n    feat : 新功能   fix : 修正錯誤   docs : 文件修改   style : 格式修改，不影響程式碼的意義   refactor : 重構程式碼   test : 增加測試   chore : 雜事，例如安裝依賴   ci : 持續整合相關的修改   pref : 效能優化  範圍(目前使用這方式無法指定): 可以填寫API等自定義內容，選填。  主旨: 描述主要提交的目的，  限制60字元 。  詳細訊息: 選填，填入更詳細的相關資訊。  重大變更: 如果有重大的變更(無法向下支援)則需要詳細記錄。  issue close: 填入相關已知可以被這次改動關閉的   issue 。  案例: 修正後端 API 錯誤   雖然這個範例是使用中文完成的，但原則上還是推薦可以的話 commit message 盡可能地使用英文來完成會比較好  執行   git-cz ，選擇以下內容：    類型 ：  fix   範圍 ：  API   提交訊息 ：修正無法正確回應的錯誤   詳細訊息 ：修正了在某些情境下後端 API 無法正確回應 200 狀態的問題。   關聯問題認證碼 ：  #456  生成的commit message：   fix(API): 修正無法正確回應的錯誤\n\n修正了在某些情境下後端 API 無法正確回應 200 狀態的問題。\n\n關聯問題：#456\n  實際 key-in:\n   Non-interactive  使用   cli  的方式直接完成添加     git-cz   --non-interactive   --type=feat   --subject=  \"add onClick prop to component\"\n  可以使用的選項:    --type : 類型   --subject : 主旨   --scope : 範圍   --body : 內容   --breaking : 重大變更   --issues : 關閉issue   --lerna :   lernajs  下會使用到的參數，可以不使用  Customization   git-cz  是提供客製化選項的，可以直接參考   這篇文章  進行。   預設官方提供的   changelog.config.js ，可以在 當前專案的根目錄或是任何parent folder 中直接新增並修改內容，  git-cz  便會自動套用格式。     module  .  exports   =   {\n     disableEmoji:   false  ,\n     format:   '{type}{scope}: {emoji}{subject}'  ,\n     list: [  'test'  ,   'feat'  ,   'fix'  ,   'chore'  ,   'docs'  ,   'refactor'  ,   'style'  ,   'ci'  ,   'perf'  ],\n     maxMessageLength:   64  ,\n     minMessageLength:   3  ,\n     questions: [  'type'  ,   'scope'  ,   'subject'  ,   'body'  ,   'breaking'  ,   'issues'  ,   'lerna'  ],\n     scopes: [],\n     types: {\n       chore: {\n         description:   'Build process or auxiliary tool changes'  ,\n         emoji:   '🤖'  ,\n         value:   'chore'\n       },\n       ci: {\n         description:   'CI related changes'  ,\n         emoji:   '🎡'  ,\n         value:   'ci'\n       },\n       docs: {\n         description:   'Documentation only changes'  ,\n         emoji:   '✏️'  ,\n         value:   'docs'\n       },\n       feat: {\n         description:   'A new feature'  ,\n         emoji:   '🎸'  ,\n         value:   'feat'\n       },\n       fix: {\n         description:   'A bug fix'  ,\n         emoji:   '🐛'  ,\n         value:   'fix'\n       },\n       perf: {\n         description:   'A code change that improves performance'  ,\n         emoji:   '⚡️'  ,\n         value:   'perf'\n       },\n       refactor: {\n         description:   'A code change that neither fixes a bug or adds a feature'  ,\n         emoji:   '💡'  ,\n         value:   'refactor'\n       },\n       release: {\n         description:   'Create a release commit'  ,\n         emoji:   '🏹'  ,\n         value:   'release'\n       },\n       style: {\n         description:   'Markup, white-space, formatting, missing semi-colons...'  ,\n         emoji:   '💄'  ,\n         value:   'style'\n       },\n       test: {\n         description:   'Adding missing tests'  ,\n         emoji:   '💍'  ,\n         value:   'test'\n       },\n       messages: {\n         type:   'Select the type of change that you  \\'  re committing:'  ,\n         customScope:   'Select the scope this component affects:'  ,\n         subject:   'Write a short, imperative mood description of the change:  \\n  '  ,\n         body:   'Provide a longer description of the change:  \\n   '  ,\n         breaking:   'List any breaking changes:  \\n  '  ,\n         footer:   'Issues this commit closes, e.g #123:'  ,\n         confirmCommit:   'The packages that this commit has affected  \\n  '  ,\n       },\n     }\n   };\n  例如要修改成中文的版本，修改後的版本:     module  .  exports   =   {\n     disableEmoji:   false  ,   // 是否禁用 emoji\n     format:   '{type}{scope}: {emoji}{subject}'  ,   // Commit 訊息的格式\n     list: [  'test'  ,   'feat'  ,   'fix'  ,   'chore'  ,   'docs'  ,   'refactor'  ,   'style'  ,   'ci'  ,   'perf'  ],   // Commit 類型的清單\n     maxMessageLength:   64  ,   // Commit 訊息的最大長度\n     minMessageLength:   3  ,   // Commit 訊息的最小長度\n     questions: [  'type'  ,   'scope'  ,   'subject'  ,   'body'  ,   'breaking'  ,   'issues'  ,   'lerna'  ],   // 問題的清單\n     scopes: [],   // Commit 範圍的清單\n     types: {   // Commit 類型的清單\n       chore: {\n         description:   '增加或修改第三方套件(輔助工具)等 (maintain)'  ,   // Commit 類型的描述\n         emoji:   '🤖'  ,   // Commit 類型的 emoji\n         value:   'chore'   // Commit 類型的值\n       },\n       ci: {\n         description:   'CI 相關更動(Continuous Integration)'  ,\n         emoji:   '🎡'  ,\n         value:   'ci'\n       },\n       docs: {\n         description:   '修改/新增文件 (documentation)'  ,\n         emoji:   '✏️'  ,\n         value:   'docs'\n       },\n       feat: {\n         description:   '新增/修改功能 (Feature)'  ,\n         emoji:   '🎸'  ,\n         value:   'feat'\n       },\n       fix: {\n         description:   '修正 Bug (bug fix)'  ,\n         emoji:   '🐛'  ,\n         value:   'fix'\n       },\n       perf: {\n         description:   '提高效能的程式碼修正'  ,\n         emoji:   '⚡️'  ,\n         value:   'perf'\n       },\n       refactor: {\n         description:   '重構 or 優化，不屬於 bug 也不屬於新增功能等'  ,\n         emoji:   '💡'  ,\n         value:   'refactor'\n       },\n       release: {\n         description:   '新增正式釋出的 release commit 訊息'  ,\n         emoji:   '🏹'  ,\n         value:   'release'\n       },\n       style: {\n         description:   '修改程式碼格式或風格，不影響原有運作，例如 ESLint (formatting, missing semi colons, …)'  ,\n         emoji:   '💄'  ,\n         value:   'style'\n       },\n       test: {\n         description:   '增加測試功能 (when adding missing tests)'  ,\n         emoji:   '💍'  ,\n         value:   'test'\n       },\n     },\n     messages: {    // Commit 的提示訊息描述\n       type:   '請選擇您要 Commit 的類型(必選)：'  ,\n       customScope:   '選擇此次 Commit 影響的範圍(可選，若無，請按 Enter 略過):'  ,\n       subject:   '簡短描述 Commit 的修正範圍(必填)：  \\n  '  ,\n       body:   '更詳細的 Commit 說明(可選，若無，請按 Enter 略過):  \\n   '  ,\n       breaking:   '列出所有重大更改(可選，若無，請按 Enter 略過):  \\n  '  ,\n       footer:   '此次 Commit 會關閉的 Issues, e.g #123(可選，若無，請按 Enter 略過):'  ,\n       confirmCommit:   '請確認本次 Commit 描述。  \\n  '  ,\n     },\n   };\n  實際內容:\n   Rules   提交訊息的結構：    標題行（必填）：   格式：  \u003C類型>(\u003C範圍>): \u003C簡短描述>   類型（type）：  描述提交的類型，例如：\n    feat ：新功能   fix ：修復錯誤   docs ：文件變更   style ：格式（不影響程式碼運行的變更）   refactor ：重構（既不是修復錯誤也不是添加功能的代碼變動）   perf ：性能優化   test ：添加測試   build ：影響構建系統或外部依賴的變更（例如：npm、gulp、webpack）   ci ：持續整合相關的變更（例如：Travis、Circle、Jenkins）   chore ：其他不修改 src 或測試文件的變更   revert ：回退先前的提交   範圍（scope）：  可選，表示影響的範圍，例如模塊、功能等。   簡短描述（subject）：  簡潔描述提交內容，建議不超過50個字符。   主體（可選）：   詳細描述提交內容，可以包含變更的原因、目的等。  每行建議不超過72個字符。   頁腳（可選）：   用於引用相關的問題（issues）或提交，或描述破壞性變更（BREAKING CHANGE）。   關聯問題：  使用   關聯問題: #issue_number  格式。   破壞性變更：  使用   BREAKING CHANGE: 描述內容  格式，詳細說明變更內容和影響。   注意事項：    標題行的長度限制：   簡短描述（subject）建議限制在50個字符以內，確保簡潔明了。  整個標題行（類型、範圍、簡短描述）的總長度建議不超過72個字符。   主體行的長度限制：   主體部分的每行建議不超過72個字符，方便閱讀。   類型小寫：   類型（type）應全部使用小寫字母。   範圍可選：   範圍（scope）是可選的，但有助於了解提交影響的模塊或功能。   破壞性變更：   如果提交包含破壞性變更，必須在頁腳部分以   BREAKING CHANGE:  開頭，詳細說明變更內容和影響。  References    git-cz客製化   git commit message golden rules翻譯   coventional commits org   約定式提交 Conventional Commits  html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"id":64,"path":65,"dir":66,"title":67,"description":68,"keywords":69,"body":85},"content:99.api:1.components.md","/api/components","api","Components","Discover every component you can use in your content.",[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"\u003CAlert />","\u003CBadge />","\u003CBlockHero />","\u003CButtonLink />","\u003CCallout />","\u003CCard />","\u003CCardGrid />","\u003CCodeGroup />","\u003CCodeBlock />","\u003CCopyButton />","\u003CIcon />","\u003CList />","\u003CSandbox />","\u003CTerminal />","\u003CVideoPlayer />","  Components  Discover every component you can use in your content.   \u003CAlert />     Check out an   info  alert with   code  and a   link .   Check out a   success  alert with   code  and a   link .   Check out a   warning  alert with   code  and a   link .   Check out a   danger  alert with   code  and a   link .     ::alert{type=\"info\"}\n   Check out an   **info**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"success\"}\n   Check out a   **success**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"warning\"}\n   Check out a   **warning**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"danger\"}\n   Check out a   **danger**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n     \u003CBadge />   \u003CBadge />  support same types as   \u003CAlert /> .     v1.2  Deprecated   Not found!     :badge[  v1.2  ]\n   \n   :badge[  Deprecated  ]{type=\"warning\"}\n   \n   ::badge{type=\"danger\"}\n   Not found!\n   ::\n     \u003CBlockHero />      Document-driven framework   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.     ::block-hero\n   ---\n   cta:\n     -   Get started\n     -   /get-started\n   secondary:\n     -   Open on GitHub →\n     -   https://github.com/nuxtlabs/docus\n   snippet: npx nuxi@latest init docus-app -t nuxtlabs/docus-starter\n   ---\n   #title\n   Document-driven framework\n   \n   #description\n   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.\n   ::\n     \u003CButtonLink />    Play on StackBlitz     :button-link[Play on StackBlitz]{icon=\"IconStackBlitz\" href=\"https://stackblitz.com/github/nuxtlabs/docus-starter\" blank}\n     \u003CCallout />   \u003CCallout />  support same types as   \u003CAlert /> .      This is a callout! Click me to open.   This is the content of the callout.    This is a callout! Click me to open.   This is the content of the callout.     ::callout\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n    \n   ::callout{type=\"warning\"}\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n     \u003CCard />      Nuxt Architecture.   Based on   Nuxt 3  and   Nuxt Content .   \nUse Nuxt to build a static site, or a serverless app.      ::card{icon=\"logos:nuxt-icon\"}\n    #title\n    Nuxt Architecture.\n    #description\n    Based on   **Nuxt 3**   and   **Nuxt Content**  . :br\n    Use Nuxt to build a static site, or a serverless app.\n    ::\n     \u003CCardGrid />      What's included?      Nuxt Architecture.   Harness the full power of Nuxt and the Nuxt ecosystem.    Vue Components.   Use built-in components (or your own!) inside your content.    Write Markdown.   Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::card-grid\n   #title\n   What's included\n   \n   #root\n   :ellipsis\n   \n   #default\n     ::card\n     #title\n     Nuxt Architecture.\n     #description\n     Harness the full power of Nuxt and the Nuxt ecosystem.\n     ::\n     ::card\n     #title\n     Vue Components.\n     #description\n     Use built-in components (or your own!) inside your content.\n     ::\n     ::card\n     #title\n     Write Markdown.\n     #description\n     Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n     ::\n   ::\n     \u003CCodeGroup />  This component uses   slots  to create a tab panel of your code examples or preview.        yarn   add   docus\n     npm   install   docus\n     ::code-group\n     ```bash [Yarn]\n     yarn   add   docus\n     ```\n     ```bash [NPM]\n     npm   install   docus\n     ```\n   ::\n     \u003CCodeBlock />  To be used inside a   \u003CCodeGroup />  component to display a preview of some rendered code.     Hello World!     /* Added as a child of   `\u003CCodeGroup />`   */\n   \n   ::code-block{label=\"Preview\" preview}\n     ::badge\n     Hello World!\n     ::\n   ::\n     \u003CCopyButton />        :copy-button{content=\"hey!\"}\n     \u003CIcon />  Icon component gives you access to all   100,000+  icons from   icones.js.org .          :icon{name=\"logos:nuxt-icon\"}\n   :icon{name=\"logos:vue\"}\n   :icon{name=\"logos:nuxt-icon\"}\n     \u003CList />       Important  Always    Amazing  Congrats    Do you know?  You can also do this    Be careful  Use with precautions    Drinking too much  Driving drunk     ::list{type=\"primary\"}\n   -   **Important**\n   -   Always\n   ::\n   \n   ::list{type=\"success\"}\n   -   Amazing\n   -   Congrats\n   ::\n   \n   ::list{type=\"info\"}\n   -   Do you know?\n   -   You can also do this\n   ::\n   \n   ::list{type=\"warning\"}\n   -   Be careful\n   -   Use with precautions\n   ::\n   \n   ::list{type=\"danger\"}\n   -   Drinking too much\n   -   Driving drunk\n   ::\n    \u003CSandbox />  Embed CodeSandbox/StackBlitz easily in your documentation with great performances.  Using the   IntersectionObserver  to load when visible in the viewport.        :sandbox{src=\"https://codesandbox.io/embed/nuxt-content-l164h?hidenavigation=1&theme=dark\"}\n     \u003CTerminal />        :terminal{content=\"nuxi build\"}\n     \u003CVideoPlayer />         ::div\n     :video-player{src=\"https://www.youtube.com/watch?v=o9e12WbKrd8\"}\n   ::\n   html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"id":87,"path":88,"dir":66,"title":89,"description":90,"keywords":91,"body":95},"content:99.api:2.composables.md","/api/composables","Composables","Discover the Docus composables to use in your custom Vue components and pages.",[92,93,94],"useDocus()","useMenu()","useScrollspy()","  Composables  Discover the Docus composables to use in your custom Vue components and pages.   useDocus()    useDocus  ()\n  gives access to docus runtime config, all default values and your custom config from   app.config.ts    config  refers to the merged config of the current page.   main ,   header ,   aside ,   footer  and   titleTemplate  can be set from   _dir.yml  and any   page.md  file.  The configs in   app.config  file will be used as defaults.     \u003C  script   setup  >\n   const   {   config   }   =   useDocus  ()\n   \u003C/  script  >\n   \n   \u003C  template  >\n     \u003C  div  >\n       \u003C  h1  >{{ config.title }}\u003C/  h1  >\n       \u003C  p  >{{ config.description }}\u003C/  p  >\n     \u003C/  div  >\n   \u003C/  template  >\n    tree  refers to the current navigation tree that is displayed in the   aside  component.     \u003C  script   setup  >\n   const   {   tree   }   =   useDocus  ()\n   \u003C/  script  >\n   \n   \u003C  template  >\n     \u003C  DocsAsideTree   :links  =  \"tree\"   />\n   \u003C/  template  >\n    useMenu()   useMenu()  gives access to   $menu  plugin controlling mobile navigation globally.     const   {\n     // Is menu visible\n     visible  ,\n     // Close menu function\n     close  ,\n     // Open menu function\n     open  ,\n     // Toggle menu function\n     toggle\n   }   =   useMenu  ()\n    useScrollspy()   useScrollspy()  is used in   docs  layout to make the ToC display the currently visible headings.     const   {\n     // Headings on the page\n     visibleHeadings  ,\n     // Active headings (for the current page)\n     activeHeadings  ,\n     // Update headings (an array of DOM nodes)\n     updateHeadings\n   }   =   useScrollspy  ()\n   html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"id":97,"path":98,"dir":66,"title":99,"description":100,"keywords":101,"body":104},"content:99.api:3.layouts.md","/api/layouts","Layouts","Docus provides multiple built-in layouts for displaying your Markdown pages.",[102,103],"default","page","  Layouts  Docus provides multiple built-in layouts for displaying your Markdown pages.   default  The default layout for every page created in the project. This layout renders multiple section alongside the content:   Aside navigation menu (togglable with   aside: false/true )  Page bottom section (togglable with   bottom: false/true )  Table of content (togglable with   toc: false/true )     ---\n   aside  :   true\n   bottom  :   true\n   toc  :   false\n   ---\n   \n   Your awesome content\n  Current page is live sample of default layout.   page   page  layout is content focused layout. This layout does not render aside menu of table of contents.  This layout accept some configuration from content front-matter.    fluid : By setting   fluid: true  in content front-matter the content will be rendered in full width.   constrainedClass : Using this option you can modify layout container look. Like constraining layout width of changing the background.   padded : Setting   padded: true  in front-matter will add horizontal padding in the layout.     ---\n   title  :   Home\n   layout  :   page\n   fluid  :   true\n   ---\n  Check   Home page  as live sample of page layout  html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",1735514019693]