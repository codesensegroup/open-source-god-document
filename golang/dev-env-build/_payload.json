[{"data":1,"prerenderedAt":86},["Reactive",2],{"search-api":3},[4,11,19,25,31,44,67,77],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","Home",[],"     Go Go Python   我們是一群熱愛技術開發的工程師，除了平常上班之餘，會捲一些技術相關研究。這個Blog是我們的小天地，除了捲go與python相關語言與框架，也會分享一些零散的技術筆記。     Go :  Python :  Side Project..",{"id":12,"path":13,"dir":14,"title":15,"description":7,"keywords":16,"body":18},"content:0.python:1.dev-env-build.md","/python/dev-env-build","python","開發環境建置",[17],"環境建置","  開發環境建置  環境建置  版控Tool   Pyenv: Python  sdkman: JVM(Java、Kotlin、Gradle、etc.)  nvm: node/npm  dotnet: .NET Core/.NET  gvm:golang  Pyenv安裝 (WSL2) : 切換python版本使用   確認更新   sudo apt update && sudo apt upgrade -y\n   安裝必需的基礎工具   項目\n   基礎開發工具：  ",{"id":20,"path":21,"dir":22,"title":15,"description":7,"keywords":23,"body":24},"content:1.golang:1.dev-env-build.md","/golang/dev-env-build","golang",[],"  開發環境建置",{"id":26,"path":27,"dir":7,"title":28,"description":7,"keywords":29,"body":30},"content:1.member.md","/member","Member",[],"     Our Memeber          samuikaze   喜歡寫程式、熱愛軟體工程        Spyua   個性外向，喜愛沖咖啡、平常時間喜歡閱讀外，也喜愛寫作。最開心的事是能與家人同樂。        shothead6062   個性外向        rellik24   個性...     \n#title\n  Yawara0326 \n#description\n個性外向",{"id":32,"path":33,"dir":34,"title":35,"description":36,"keywords":37,"body":43},"content:2.angular:1.angular-starter.md","/angular/angular-starter","angular","Angular 起手式","本文件會針對學習與撰寫 Angular 所需要的工具與知識整理下來，當作入門的起手式。",[38,39,40,41,42],"Table of Contents","需求技能","協助工具","開始第一個 Angular 練習","參考資料","  Angular 起手式  本文件會針對學習與撰寫 Angular 所需要的工具與知識整理下來，當作入門的起手式。  Table of Contents    需求技能    前端最基本的 HTML + CSS + Javascript   Typescript   協助工具    必要工具   選用工具   開始第一個 Angular 練習   參考資料  需求技能  撰寫 Angular 前，需要先學會下面所列的這些基礎技能:   前端最基本的 HTML + CSS + Javascript  Typescript  以下是針對為什麼撰寫 Angular 前要學習這些技能的說明  前端最基本的 HTML + CSS + Javascript  Angular 是前端框架，而前端跟 HTML、CSS 與 Javascript 一定脫不了關係，因此對於這三項技能必須有基礎的了解，知道如何透過 HTML + CSS 刻劃出想要的版型，並透過 Javascript 實作頁面中的功能。  Typescript  Angular 目前開發上都是使用 Typescript 進行撰寫與編譯，因此對於 Typescript 必須有基礎的了解，特別是型別、介面的宣告、泛型、列舉、物件導向的使用。  協助工具  開發 Angular 少不了一些工具來協助建置、撰寫與編譯專案，下面會針對必要與選用的工具進行說明  必要工具  下面列出來的這些工具是必要的工具，學會這些工具是撰寫 Angular 專案的前置需求:   Node.js  主要是要使用其附帶的 npm 套件管理工具以及其由 Google 所開發並應用於 Google Chrome 系列瀏覽器的 V8 引擎   @angular/cli  在建置、撰寫、測試與編譯 Angular 專案時一定會用到的指令工具，因開發過程會大量使用，因此對於如何建立專案、建立元件 / 服務 / 模組 / 路由等、啟動測試環境、編譯正式版本等指令需要非常熟悉。  Git  版本控制，透過 Angular 指令建立專案時預設就會協助開發者初始化版本控制，在實際場景中，版本控制工具除了可以對專案進行版本控制外，也增加了專案協作的能力  任意終端機  不論在何種作業系統中，都一定會包含一個終端機應用程式供開發者或一般使用者使用，前面也有提到開發專案會大量使用 Angular 指令做事，npm 也是透過指令來管理其套件  Visual Studio Code  常被簡稱為 VSCode，目前在 Javascript 與 Typescript 世界中，它是公認最好用的「文字編輯器」，主要原因是因為 Typescript 與 VSCode 都是由微軟所開發，因此在整合方面非常好，再加上可以安裝延伸模組的特性，讓其除了有基礎的錯誤警示功能外，還可以加上除錯 (Debugger) 等額外功能，因此深受廣大的社群愛戴。  而下面列出來的是開發 Angular 專案時一定要安裝的延伸模組:   之所以稱其為「文字編輯器」而非 IDE 是因為有一部份的社群開發者認為在沒有安裝任何套件的情況下，VSCode 本身對於特定的程式語言並沒有除錯、編譯等功能，因此將其認定為文字編輯器，但這邊我也不想吵這個，開發起來順手最重要。   Angular Language Service  由 Angular 官方所開發的語言服務伺服器，提供程式碼撰寫時的快速完成功能。  Debugger for (任意瀏覽器)  透過中斷點來找出錯誤我想是很常見的除錯方式，在 VSCode 中若要透過中斷點來讓程式執行暫停在特定位置，就必須安裝這類套件，目前並不是每個瀏覽器都支援，但可以嘗試找看看有沒有相關的套件可以使用  EditorConfig for VS Code  透過 .editorconfig 檔來統一專案中程式碼撰寫風格是非常常見的，在 VSCode 中必須安裝此套件，.editorconfig 中所撰寫的規則才會生效  ESLint  看到 Lint 字樣就是到這個套件是用於支援 ESLint 這個 npm 套件的延伸模組，透過這個模組，可以將團隊所規定的撰寫規範、風格等，透過 ESLint 設定檔來加以限制，透過 ESLint 套件可以讓不符合規範的程式碼被標上紅色或黃色的下波浪線，進而增進專案的程式碼品質  Git Graph  版本控制圖表協助工具，當開發到一定的規模後，透過指令來檢視整個專案的分支情形是非常痛苦的事情，目前在所有圖形化分支工具中，我認為這款所匯出的圖形是最易讀懂，因此非常建議安裝此套件  Prettier - Code formatter  雖然 VSCode 內建就有針對 HTML / CSS / Javascript / Typescript 的格式化工具，但透過安裝此工具，可以針對 Sass、Scss 等非原生支援的檔案進行格式化  選用工具  以下是開發過程中可以考慮使用，但非必要的工具:   nvm  Node.js 有很多版本，而 Angular 每個版本針對 Node.js 版本的要求都不同，為了讓大家可以更方便的在不同版本間切換，非常推薦透過 nvm 進行 Node.js 的版本控制   Windows 使用者有第三方的 Port 版，搜尋 nvm for windows 就可以找到  pnpm  npm 最常被大家詬病的就是其套件管理的效率太差，雖然官方有推出新的解決方案，但好像沒有大力推廣，且後續好像也沒有繼續開發，因此紛紛出現第三方套件來解決這個問題，目前就 yarn 套件管理器之外，最常見的應該就屬 pnpm 了  它是透過將 npm 的套件安裝到作業系統使用者的資料夾中，每個專案 node_modules 資料夾中的套件資料夾會透過符號連結 (Symbolic link) 的方式把實際位置指到實際套件安裝的資料夾，透過這個方式管理套件除了可以節省硬碟空間外，對於已經安裝過的套件不需要再重新下載，因此在安裝的過程也會比較快   Windows 的實作方式與 Linux / MacOS 不同，但原理一樣，不過若專案安裝的套件過於複雜，或必須加上 npm 的   --legacy-peer-deps  參數才有辦法成功安裝的話，在 Windows 上就不建議使用此工具管理套件  Docker / Podman  透過容器來把主機環境與開發環境隔離是現在非常常見的開發方式，透過這種方式開發可以不用將開發所需的工具安裝到主機環境中，只要執行特定的映像檔，就可以把測試環境跑起來，且若是多人同時開發，透過容器還可以統一開發環境，避免因環境不同導致最終執行結果出現差異的狀況發生   Windows 使用者可以透過 WSL2 或 Docker Desktop 來執行  而 VSCode 的套件中也有一些選用的套件:   Dev Containers  容器開發必要的套件，透過這個套件讓 VSCode 可以開啟容器中的任意檔案與資料夾，  DotEnv  雖然 Angular 若有環境變數需要設定會使用其自帶的   environments.ts  檔來設定，但仍有少數團隊會使用   .env  檔來管理，若團隊是透過   .env  來管理這些變數，建議可以安裝這個套件  GitLens  團隊協作開發常常會發生程式碼寫錯，但沒人承認的狀況發生，在 Git 原生就有提供 Blame 功能讓團隊成員可以找出兇手是誰，但若檔案內容非常大，指令就必須下的很複雜，透過這個套件的協助，只要將輸入游標移動到指定的行後，該行後面就會出現最後是由誰所修改，非常的方便，若團隊中常有人搞事又不承認，這個套件就非常推薦安裝  IntelliCode  這個功能是由 Visual Studio 搬過來的，在 Copilot 出現前非常好用的自動完成工具，撰寫過程中會給出很多好用的提示，雖然不像 Visual Studio 內建的那麼聰明，但對於懶得打字的人來說非常好用  IntelliCode API Usage Examples  這個套件比 IntelliCode 還要晚出，其所提供的功能是協助開發者在 GitHub 上找出指定的功能別人是怎麼使用的，讓開發者當作參考，對於初學 Angular 或常用新出套件的開發者來說非常好用  Live Share  程式碼共編神器，也是從 Visual Studio 拔出來的功能，透過這個套件可以不用透過版控或任何第三方工具，直接在 VSCode 上同步看到修改的程式碼，非常適用於團隊開發臨時討論用  Pretty TypeScript Errors  有些第三方開發者認為原生的 VSCode 顯示 Typescript 錯誤非常的雜亂，因此想透過這個套件讓錯誤訊息更加直覺與整潔，但效果很主觀，因此對於錯誤訊息也有潔癖的人來說，這個套件是必裝  Sass (.sass only)  開發比較常見 CSS 與 Scss，但若你的團隊開發時是使用 Sass，那這個套件就是必裝套件了  WSL  Windows 使用者若想在 WSL2 中開發 Angular，建議安裝此延伸模組，其所提供的功能與 Dev Containers 類似，但是是與 WSL2 作互動  開始第一個 Angular 練習  網路上或市面上有許多學習 Angular 相關的資源，但若是第一次撰寫 Angular，會建議先去官方完成  「英雄之旅」 的入門專案，在這個練習的專案中你會學到最基礎的 Angular 撰寫，以及 API 如何呼叫  參考資料    Node.js - 維基百科   英雄之旅 - Angular Tutorial - Angular",{"id":45,"path":46,"dir":47,"title":48,"description":49,"keywords":50,"body":66},"content:99.api:1.components.md","/api/components","api","Components","Discover every component you can use in your content.",[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"\u003CAlert />","\u003CBadge />","\u003CBlockHero />","\u003CButtonLink />","\u003CCallout />","\u003CCard />","\u003CCardGrid />","\u003CCodeGroup />","\u003CCodeBlock />","\u003CCopyButton />","\u003CIcon />","\u003CList />","\u003CSandbox />","\u003CTerminal />","\u003CVideoPlayer />","  Components  Discover every component you can use in your content.   \u003CAlert />     Check out an   info  alert with   code  and a   link .   Check out a   success  alert with   code  and a   link .   Check out a   warning  alert with   code  and a   link .   Check out a   danger  alert with   code  and a   link .     ::alert{type=\"info\"}\n   Check out an   **info**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"success\"}\n   Check out a   **success**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"warning\"}\n   Check out a   **warning**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"danger\"}\n   Check out a   **danger**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n     \u003CBadge />   \u003CBadge />  support same types as   \u003CAlert /> .     v1.2  Deprecated   Not found!     :badge[  v1.2  ]\n   \n   :badge[  Deprecated  ]{type=\"warning\"}\n   \n   ::badge{type=\"danger\"}\n   Not found!\n   ::\n     \u003CBlockHero />      Document-driven framework   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.     ::block-hero\n   ---\n   cta:\n     -   Get started\n     -   /get-started\n   secondary:\n     -   Open on GitHub →\n     -   https://github.com/nuxtlabs/docus\n   snippet: npx nuxi@latest init docus-app -t nuxtlabs/docus-starter\n   ---\n   #title\n   Document-driven framework\n   \n   #description\n   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.\n   ::\n     \u003CButtonLink />    Play on StackBlitz     :button-link[Play on StackBlitz]{icon=\"IconStackBlitz\" href=\"https://stackblitz.com/github/nuxtlabs/docus-starter\" blank}\n     \u003CCallout />   \u003CCallout />  support same types as   \u003CAlert /> .      This is a callout! Click me to open.   This is the content of the callout.    This is a callout! Click me to open.   This is the content of the callout.     ::callout\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n    \n   ::callout{type=\"warning\"}\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n     \u003CCard />      Nuxt Architecture.   Based on   Nuxt 3  and   Nuxt Content .   \nUse Nuxt to build a static site, or a serverless app.      ::card{icon=\"logos:nuxt-icon\"}\n    #title\n    Nuxt Architecture.\n    #description\n    Based on   **Nuxt 3**   and   **Nuxt Content**  . :br\n    Use Nuxt to build a static site, or a serverless app.\n    ::\n     \u003CCardGrid />      What's included?      Nuxt Architecture.   Harness the full power of Nuxt and the Nuxt ecosystem.    Vue Components.   Use built-in components (or your own!) inside your content.    Write Markdown.   Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::card-grid\n   #title\n   What's included\n   \n   #root\n   :ellipsis\n   \n   #default\n     ::card\n     #title\n     Nuxt Architecture.\n     #description\n     Harness the full power of Nuxt and the Nuxt ecosystem.\n     ::\n     ::card\n     #title\n     Vue Components.\n     #description\n     Use built-in components (or your own!) inside your content.\n     ::\n     ::card\n     #title\n     Write Markdown.\n     #description\n     Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n     ::\n   ::\n     \u003CCodeGroup />  This component uses   slots  to create a tab panel of your code examples or preview.        yarn   add   docus\n     npm   install   docus\n     ::code-group\n     ```bash [Yarn]\n     yarn   add   docus\n     ```\n     ```bash [NPM]\n     npm   install   docus\n     ```\n   ::\n     \u003CCodeBlock />  To be used inside a   \u003CCodeGroup />  component to display a preview of some rendered code.     Hello World!     /* Added as a child of   `\u003CCodeGroup />`   */\n   \n   ::code-block{label=\"Preview\" preview}\n     ::badge\n     Hello World!\n     ::\n   ::\n     \u003CCopyButton />        :copy-button{content=\"hey!\"}\n     \u003CIcon />  Icon component gives you access to all   100,000+  icons from   icones.js.org .          :icon{name=\"logos:nuxt-icon\"}\n   :icon{name=\"logos:vue\"}\n   :icon{name=\"logos:nuxt-icon\"}\n     \u003CList />       Important  Always    Amazing  Congrats    Do you know?  You can also do this    Be careful  Use with precautions    Drinking too much  Driving drunk     ::list{type=\"primary\"}\n   -   **Important**\n   -   Always\n   ::\n   \n   ::list{type=\"success\"}\n   -   Amazing\n   -   Congrats\n   ::\n   \n   ::list{type=\"info\"}\n   -   Do you know?\n   -   You can also do this\n   ::\n   \n   ::list{type=\"warning\"}\n   -   Be careful\n   -   Use with precautions\n   ::\n   \n   ::list{type=\"danger\"}\n   -   Drinking too much\n   -   Driving drunk\n   ::\n    \u003CSandbox />  Embed CodeSandbox/StackBlitz easily in your documentation with great performances.  Using the   IntersectionObserver  to load when visible in the viewport.        :sandbox{src=\"https://codesandbox.io/embed/nuxt-content-l164h?hidenavigation=1&theme=dark\"}\n     \u003CTerminal />        :terminal{content=\"nuxi build\"}\n     \u003CVideoPlayer />         ::div\n     :video-player{src=\"https://www.youtube.com/watch?v=o9e12WbKrd8\"}\n   ::\n   html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"id":68,"path":69,"dir":47,"title":70,"description":71,"keywords":72,"body":76},"content:99.api:2.composables.md","/api/composables","Composables","Discover the Docus composables to use in your custom Vue components and pages.",[73,74,75],"useDocus()","useMenu()","useScrollspy()","  Composables  Discover the Docus composables to use in your custom Vue components and pages.   useDocus()    useDocus  ()\n  gives access to docus runtime config, all default values and your custom config from   app.config.ts    config  refers to the merged config of the current page.   main ,   header ,   aside ,   footer  and   titleTemplate  can be set from   _dir.yml  and any   page.md  file.  The configs in   app.config  file will be used as defaults.     \u003C  script   setup  >\n   const   {   config   }   =   useDocus  ()\n   \u003C/  script  >\n   \n   \u003C  template  >\n     \u003C  div  >\n       \u003C  h1  >{{ config.title }}\u003C/  h1  >\n       \u003C  p  >{{ config.description }}\u003C/  p  >\n     \u003C/  div  >\n   \u003C/  template  >\n    tree  refers to the current navigation tree that is displayed in the   aside  component.     \u003C  script   setup  >\n   const   {   tree   }   =   useDocus  ()\n   \u003C/  script  >\n   \n   \u003C  template  >\n     \u003C  DocsAsideTree   :links  =  \"tree\"   />\n   \u003C/  template  >\n    useMenu()   useMenu()  gives access to   $menu  plugin controlling mobile navigation globally.     const   {\n     // Is menu visible\n     visible  ,\n     // Close menu function\n     close  ,\n     // Open menu function\n     open  ,\n     // Toggle menu function\n     toggle\n   }   =   useMenu  ()\n    useScrollspy()   useScrollspy()  is used in   docs  layout to make the ToC display the currently visible headings.     const   {\n     // Headings on the page\n     visibleHeadings  ,\n     // Active headings (for the current page)\n     activeHeadings  ,\n     // Update headings (an array of DOM nodes)\n     updateHeadings\n   }   =   useScrollspy  ()\n   html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",{"id":78,"path":79,"dir":47,"title":80,"description":81,"keywords":82,"body":85},"content:99.api:3.layouts.md","/api/layouts","Layouts","Docus provides multiple built-in layouts for displaying your Markdown pages.",[83,84],"default","page","  Layouts  Docus provides multiple built-in layouts for displaying your Markdown pages.   default  The default layout for every page created in the project. This layout renders multiple section alongside the content:   Aside navigation menu (togglable with   aside: false/true )  Page bottom section (togglable with   bottom: false/true )  Table of content (togglable with   toc: false/true )     ---\n   aside  :   true\n   bottom  :   true\n   toc  :   false\n   ---\n   \n   Your awesome content\n  Current page is live sample of default layout.   page   page  layout is content focused layout. This layout does not render aside menu of table of contents.  This layout accept some configuration from content front-matter.    fluid : By setting   fluid: true  in content front-matter the content will be rendered in full width.   constrainedClass : Using this option you can modify layout container look. Like constraining layout width of changing the background.   padded : Setting   padded: true  in front-matter will add horizontal padding in the layout.     ---\n   title  :   Home\n   layout  :   page\n   fluid  :   true\n   ---\n  Check   Home page  as live sample of page layout  html.sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .sepia .shiki span {color: var(--shiki-sepia);background: var(--shiki-sepia-bg);font-style: var(--shiki-sepia-font-style);font-weight: var(--shiki-sepia-font-weight);text-decoration: var(--shiki-sepia-text-decoration);}",1735138438353]